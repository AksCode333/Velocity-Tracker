#include <SSD1306Ascii.h> //i2C OLED
#include <SSD1306AsciiWire.h> //i2C OLED
#include <AS5600.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
AS5600 as5600;

float displacement = 0;
float velocity = 0;
float avgVelocity = 0;
float bottomPosition = 0;
float finalPosition = 0;
float p1 = 0;
float p2 = 0;
bool going_up;
float micro_displacement;
float vel = 0;
float vel_sum = 0;
unsigned long startTime = 0;
int noise_out = 7;
int showROM = 6; 
int avgROM = 0;
const int confirm_button = 4; // Naming switch confirm_button pin
int left_val = 0;
const int potPin = 5;
bool w = false;
int t = 0;

float myArray[2];
float avg_vel_finished[3]; // Change this number later on to a variable that I can change so that the number of reps I can do is different
float rom[3];

void setup()
{
  Serial.begin(115200);
  //Serial.println(__FILE__);
  //Serial.print("AS5600_LIB_VERSION: ");
  //Serial.println(AS5600_LIB_VERSION);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  pinMode(showROM, INPUT);
  pinMode(confirm_button, INPUT);
  delay(2000);
  display.clearDisplay();

  init_settings();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  //display.invertDisplay(true);
  display.setCursor(0, 0);
  // Display static text
  pinMode(7, OUTPUT);
  Wire.begin();

  as5600.begin();  //  set direction pin.
  as5600.setDirection(AS5600_CLOCK_WISE);
  // Serial.print("Connect device 0: ");
  // Serial.println(as5600.isConnected() ? "true" : "false");
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Connect device:");
  display.println(as5600.isConnected() ? "true" : "false");
  display.display(); 
  
  // Serial.println("START REP");
  digitalWrite(7, HIGH); //Set the voltage to high and makes a noise
  delay(1500);
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("ACV: ");
  display.display(); 
  digitalWrite(7, LOW);//Sets the voltage to low and makes no noise
}

int n = 0;
int i = 0;
int p = 0;
//-----------------------------------------------

void loop(){
  //Serial.println(digitalRead(confirm_button));
  // Serial.println(digitalRead(showROM));
  static uint32_t lastTime = 0;

  uint32_t startTime = micros();
  myArray[1] = as5600.getCumulativePosition()/292.5714286*-1;
  //  set initial position
  as5600.getCumulativePosition();
  
  //  update every 100 ms
  //  should be enough up to ~200 RPM
  if (millis() - lastTime >= 100)
  {
    //float p2 = as5600.getCumulativePosition()/292.5714286;
    lastTime = millis();
    // Serial.print(millis());
    // //Serial.print(as5600.getCumulativePosition());
    // Serial.print("\t");
    // Serial.print(as5600.getRevolutions());
    // Serial.print("\t");
    // Serial.println(as5600.getCumulativePosition()/292.5714286*-1); //Converts the raw angle to Centimeters because the diameter is 14 cm --> 4096 / 14 = 292.5714286

  //--------------------------------------Trial function for velocity
    if(startTime >= 100){
        myArray[2] = as5600.getCumulativePosition()/292.5714286*-1;

        if (myArray[1] <= (myArray[2])){// is it going upward // Change htis between < & = for super low velocities

          Serial.print(as5600.getCumulativePosition()/292.5714286*-1);
          Serial.print(", ");
          Serial.print(0);
          Serial.print(", ");
          Serial.println(micros());

        // rom[p] = as5600.getCumulativePosition()/292.5714286*-1;
        // p/////// = 2;
        //Do someting here about noteing down the cum position so that I can compare that with the ending position on the rep and then create a range of motion stat...!
          vel = (myArray[2] - myArray[1])/.1; // Displacement distance devided by time (1 thenth of a second)
          //Serial.println(vel);
          vel_sum = vel_sum + vel;
          n++;
        } else if (n > 20) { // Makes sure htat the rep is going on for a vertain amount of time
            
            // rom[1] = as5600.getCumulativePosition()/292.5714286*-1;
            // avgROM = avgROM + (rom[1] - rom[0]);
            //Serial.println("the average Velocity of that concentric was ");
            //display.setCursor(0, 20);
            //Serial.println("rep done, , ");
            display.print(vel_sum/n);
            display.println(" M/S");
            display.display();
            // Serial.print(vel_sum/n);
            // Serial.println(", ");
            avg_vel_finished[i] = vel_sum/n;
            delay(500);
            myArray[1] = 0;
            myArray[2]= 0;
            vel_sum = 0;
            n = 0;
            // Serial.println(i);
            i++;
            if (i > 2){ //End of set shows all data -- Create some kind of switch that tells the device how many repts 1 - 3 - 5
              i = 0;
              display.setCursor(50,0);
              display.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);
              display.display();


              Serial.print("SET, DONE");
              Serial.println(", DONE");
              // Serial.print("Your Velocity #");
              // Serial.print(1);
              // Serial.print(":   ");
              // Serial.println(avg_vel_finished[0]);
              // Serial.print("Your Velocity #");
              // Serial.print(2);
              // Serial.print(":   ");
              // Serial.println(avg_vel_finished[1]);
              // Serial.print("Your Velocity #");
              // Serial.print(3);
              // Serial.print(":   ");
              // Serial.println(avg_vel_finished[2]);
              // Serial.print("Your average set velocity was: ");
              // Serial.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);
              
              //final_stats();
              display.clearDisplay();
              display.setTextSize(2);
              display.setCursor(0,0);
              display.println("ACV:");
              display.setCursor(50,0);
              display.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);
              display.print(avg_vel_finished[0]);
              display.println(" M/S");
              display.print(avg_vel_finished[1]);
              display.println(" M/S");
              display.print(avg_vel_finished[2]);
              display.println(" M/S");
              display.display();
              delay(50000);

              display.setCursor(0,0);
              display.clearDisplay();
              display.println("ACV:");
              display.display(); 
            }
            // Serial.print("done, ");
            // Serial.print("0, ");
            // Serial.println("startrep");
              digitalWrite(7, HIGH); //Set the voltage to high and makes a noise
              delay(500);
              digitalWrite(7, LOW);//Sets the voltage to low and makes no noise
      } else {
              // Serial.println("Rep, No, NO");
              n = 0;
              myArray[1] = 0;
              myArray[2]= 0;
              vel_sum = 0;
      }
    } 
//-------------------------------------------- end
    
} 
}

void init_settings() {
  display.setTextSize(2);
  display.setTextColor(WHITE);
  //display.invertDisplay(true);
  display.setCursor(0, 0);
  display.println("Ari Aks's");
  display.print("Velocity Tracker");
  display.display(); 
  //display.startscrollleft(0, 0);
  delay(3000);
  //display.stopscroll();

  int val = digitalRead(confirm_button);
  // Serial.println(val);
   if(val == HIGH){
    // Serial.println(val);
   }
}

void final_stats() {
  for(int i = 0; i < 100; i++){
    // Serial.println(digitalRead(potPin));
    display.clearDisplay();
    if(digitalRead(potPin) > .9) {
      display.setTextSize(2);
      display.setCursor(0,0);
      display.println("ACV:");
      display.setCursor(50,0);
      display.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);
      display.print(avg_vel_finished[0]);
      display.println(" M/S");
      display.print(avg_vel_finished[1]);
      display.println(" M/S");
      display.print(avg_vel_finished[2]);
      display.println(" M/S");
      display.display();
      delay(500);
    } else {
        display.clearDisplay();
        display.setTextSize(1);
        display.setCursor(0, 0);
        display.println("ROM DATA");
        display.println("The average rom is:");
        display.print(avgROM);
        display.display(); 
        delay(500);
    }
  }


  
}
