#include <SSD1306Ascii.h> //i2C OLED
#include <SSD1306AsciiWire.h> //i2C OLED
#include <AS5600.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <math.h>

// 0X3C+SA0 - 0x3C or 0x3D
#define I2C_ADDRESS 0x3C

// Define proper RST_PIN if required.
#define RST_PIN -1

SSD1306AsciiWire oled;
AS5600 as5600;

//Settings definitions
int choice = 0;
String lifts[3] = {"Bench", "Squat", "Deadlift"};
int weight;
int reps;

int potpin = A2;
int selectionButton = 4;
int lastStateSelection = LOW;
int leftNow;
int rightNow;

int left = 6;
int lastStateLeft = LOW;
int right = 5;
int lastStateRight = LOW;
bool edit = true;
float displacement = 0;
float velocity = 0;
float avgVelocity = 0;
float bottomPosition = 0;
float finalPosition = 0;
float p1 = 0;
float p2 = 0;
bool going_up;
float micro_displacement;
float vel = 0;
float vel_sum = 0;
unsigned long startTime = 0;
int noise_out = 7;
int showROM = 6; 
int avgROM = 0;
const int confirm_button = 4; // Naming switch confirm_button pin
int left_val = 0;
const int potPin = 5;
bool w = false;
int t = 0;

float myArray[2];
float avg_vel_finished[3]; // Change this number later on to a variable that I can change so that the number of reps I can do is different
float rom[3];

void setup()
{
  pinMode(left, INPUT);
  pinMode(right, INPUT);
  Wire.begin();
  Wire.setClock(400000L);

  Serial.begin(115200);
  //Serial.println(__FILE__);
  //Serial.print("AS5600_LIB_VERSION: ");
  //Serial.println(AS5600_LIB_VERSION);
#if RST_PIN >= 0
  oled.begin(&Adafruit128x64, I2C_ADDRESS, RST_PIN);
#else // RST_PIN >= 0
  oled.begin(&Adafruit128x64, I2C_ADDRESS);
#endif // RST_PIN >= 0
  oled.setFont(Adafruit5x7);
  
  pinMode(showROM, INPUT);
  pinMode(confirm_button, INPUT);
  delay(2000);
  oled.clear();


  oled.set1X();
  //oled.invertoled(true);
  oled.setCursor(0, 0);
  // oled static text
  pinMode(7, OUTPUT);
  Wire.begin();

  as5600.begin();  //  set direction pin.
  as5600.setDirection(AS5600_CLOCK_WISE);
  // Serial.print("Connect device 0: ");
  // Serial.println(as5600.isConnected() ? "true" : "false");
  oled.clear();

  system_setttings(); // DETERMINES EVERYTHING THAT WILL BE ENTERED INTO GOOGLE SHEETS

  oled.setCursor(0,0);
  oled.set2X();
  oled.print("Connect device:");
  oled.println(as5600.isConnected() ? "true" : "false");
  oled.set1X();
  oled.print("Lift: ");
  oled.println(lifts[choice]);
  oled.print("Weight: ");
  oled.println(weight);
  oled.print("Reps: ");
  oled.println(reps);
  
  // Serial.println("START REP");
  digitalWrite(7, HIGH); //Set the voltage to high and makes a noise
  delay(2500);
  oled.clear();
  oled.setCursor(0,0);
  oled.set2X();
  oled.println("ACV: ");
  oled.set1X();
  digitalWrite(7, LOW);//Sets the voltage to low and makes no noise
}

int n = 0;
int i = 0;
int p = 0;
//-----------------------------------------------

void loop(){
  //Serial.println(digitalRead(confirm_button));
  // Serial.println(digitalRead(showROM));
  static uint32_t lastTime = 0;

  uint32_t startTime = micros();
  myArray[1] = as5600.getCumulativePosition()/292.5714286*-1;
  //  set initial position
  as5600.getCumulativePosition();
  
  //  update every 100 ms
  //  should be enough up to ~200 RPM
  if (millis() - lastTime >= 100)
  {
    //float p2 = as5600.getCumulativePosition()/292.5714286;
    lastTime = millis();
    // Serial.print(millis());
    // //Serial.print(as5600.getCumulativePosition());
    // Serial.print("\t");
    // Serial.print(as5600.getRevolutions());
    // Serial.print("\t");
    // Serial.println(as5600.getCumulativePosition()/292.5714286); //Converts the raw angle to Centimeters because the diameter is 14 cm --> 4096 / 14 = 292.5714286

  //--------------------------------------Trial function for velocity
    if(startTime >= 100){
        myArray[2] = as5600.getCumulativePosition()/292.5714286*-1;

        if (myArray[1] <= (myArray[2])){// is it going upward // Change htis between < & = for super low velocities

          Serial.print(as5600.getCumulativePosition()/292.5714286*-1);
          Serial.print(", ");
          Serial.print(micros());
          Serial.print(", ");
          Serial.print(reps);
          Serial.print(",");
          Serial.print(weight);
          Serial.print(",");
          Serial.println(choice);

        // rom[p] = as5600.getCumulativePosition()/292.5714286;
        // p/////// = 2;
        //Do someting here about noteing down the cum position so that I can compare that with the ending position on the rep and then create a range of motion stat...!
          vel = (myArray[2] - myArray[1])/.1; // Displacement distance devided by time (1 thenth of a second)
          //Serial.println(vel);
          vel_sum = vel_sum + vel;
          n++;
        } else if (n > 20) { // Makes sure htat the rep is going on for a vertain amount of time
            
            // rom[1] = as5600.getCumulativePosition()/292.5714286;
            // avgROM = avgROM + (rom[1] - rom[0]);
            //Serial.println("the average Velocity of that concentric was ");
            //oled.setCursor(0, 20);
            //Serial.println("rep done, , ");
            oled.set2X();
            oled.print(vel_sum/n);
            oled.println(" M/S");
            // Serial.print(vel_sum/n);
            // Serial.println(", ");
            avg_vel_finished[i] = vel_sum/n;
            delay(500);
            myArray[1] = 0;
            myArray[2]= 0;
            vel_sum = 0;
            n = 0;
            // Serial.println(i);
            i++;
            if (i > 2){ //End of set shows all data -- Create some kind of switch that tells the device how many repts 1 - 3 - 5
              i = 0;
              oled.setCursor(50,0);
              oled.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);


              Serial.print("SET, DONE");
              Serial.println(", DONE");
              //REVMOVE THIS PART LATER : DOWN ---------------------------------------------------
              // Serial.print("Your Velocity #");
              // Serial.print(1);
              // Serial.print(":   ");
              // Serial.println(avg_vel_finished[0]);
              // Serial.print("Your Velocity #");
              // Serial.print(2);
              // Serial.print(":   ");
              // Serial.println(avg_vel_finished[1]);
              // Serial.print("Your Velocity #");
              // Serial.print(3);
              // Serial.print(":   ");
              // Serial.println(avg_vel_finished[2]);
              // Serial.print("Your average set velocity was: ");
              // Serial.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);
//----------------------------------------------------------------0-------------------------


              //final_stats();
              oled.clear();
              oled.set1X();
              oled.setCursor(0,0);
              oled.set2X();
              oled.println("ACV:");
              oled.setCursor(50,0);
              oled.println((avg_vel_finished[0] +avg_vel_finished[1] +avg_vel_finished[2])/3);
              oled.set1X();
              oled.print(avg_vel_finished[0]);
              oled.println(" M/S");
              oled.print(avg_vel_finished[1]);
              oled.println(" M/S");
              oled.print(avg_vel_finished[2]);
              oled.println(" M/S");
              delay(50000);

              oled.setCursor(0,0);
              oled.clear();
              oled.set2X();
              oled.println("ACV:");
              oled.set1X();
            }
            // Serial.print("done, ");
            // Serial.print("0, ");
            // Serial.println("startrep");
              digitalWrite(7, HIGH); //Set the voltage to high and makes a noise
              delay(500);
              digitalWrite(7, LOW);//Sets the voltage to low and makes no noise
      } else {
              // Serial.println("Rep, No, NO");
              n = 0;
              myArray[1] = 0;
              myArray[2]= 0;
              vel_sum = 0;
      }
    } 
//-------------------------------------------- end
    
} 
}


void system_setttings() {

  String set[5] = {"Start Rep", "Weight", "Lift", "Reps", "Other"};
  oled.set2X();
  int x = 0; //which value of set that they are going to display 
  oled.println(set[x]);
  // oled.println(set);
  //Start looking for button presses to choose tthe settings
  while (edit == true) {
    leftNow = digitalRead(left);
    rightNow = digitalRead(right);
    if(leftNow == HIGH && lastStateLeft == LOW){
      x = x - 1;
      if (x < 0) {
      x = 4;
      }
      Serial.println(x);
      oled.clear();
      oled.println(set[x]);
    }
    if(rightNow == HIGH && lastStateRight == LOW){
      x = x + 1;
      if (x > 4) {
      x = 0;
      }
      Serial.println(x);
      oled.clear();
      oled.println(set[x]);
    } 
    if(digitalRead(selectionButton) == HIGH && lastStateSelection == LOW){ // TO START CHANGINGT YHE SETTINGS
      if(x == 0){ //Start the tracking
        edit = false;
      }
      if(x == 1) { //Change the weight
        delay(40);
        lastStateSelection = HIGH;
        int lastchoice;
        bool choose = true;
        while(choose == true){
          if(lastchoice != round((int(analogRead(potpin)/1.5/5)*5))){
          oled.clear();
          oled.println(round((int(analogRead(potpin)/1.5/5)*5)));
          }
          if (digitalRead(selectionButton) == HIGH && lastStateSelection == LOW) {
            //oled.println("END");
            choose = false;
            x = 0;
            oled.clear();
            weight = round((int(analogRead(potpin)/1.5/5)*5));
            oled.println(set[x]);
          }
          lastStateSelection = digitalRead(selectionButton);
          lastchoice = round((int(analogRead(potpin)/1.5/5)*5));
        }
        
        delay(40);
      }
      if(x ==2) { // CHOSE WHAT LIFT SHOULD BE TRACKED
        oled.clear();
        oled.println(lifts[choice]);
        bool swap = true;
        while (swap == true) {

          leftNow = digitalRead(left);
          rightNow = digitalRead(right);
          if(leftNow == HIGH && lastStateLeft == LOW){
            choice = choice - 1;
            if (choice < 0) {
            choice = 2;
            }
            oled.clear();
            oled.println(lifts[choice]);
          }
          if(rightNow == HIGH && lastStateRight == LOW){
            choice = choice + 1;
            if (choice > 2) {
            choice = 0;
            }
            Serial.println(choice);
            oled.clear();
            oled.println(lifts[choice]);
          } 
          if (digitalRead(selectionButton) == HIGH && lastStateSelection == LOW) {
            //oled.println("END");
            x = false;
            x = 0;
            oled.clear();
            oled.println(set[x]);
            swap = false;
          }
        }

    }
    if(x == 3) { // How many Reps?
        delay(15);
        lastStateSelection = digitalRead(selectionButton);
        int lastchoice;
        bool choose = true;
        while(choose == true){
          if(lastchoice != int(analogRead(potpin)/85)){
            oled.clear();
            oled.println(int(analogRead(potpin)/85));
          }
          if (digitalRead(selectionButton) == HIGH && lastStateSelection == LOW) {
            //oled.println("END");
            reps = int(analogRead(potpin)/85);
            choose = false;
            x = 0;
            oled.clear();
            oled.println(set[x]);
          }
          lastStateSelection = digitalRead(selectionButton);
          lastchoice = int(analogRead(potpin)/85);
        }
        
        delay(100);
    }
    
    lastStateLeft = digitalRead(left);
    lastStateRight = digitalRead(right);
    lastStateSelection = digitalRead(selectionButton);
    // delay(40);
  }
    lastStateLeft = digitalRead(left);
    lastStateRight = digitalRead(right);
    lastStateSelection = digitalRead(selectionButton);
}
}
